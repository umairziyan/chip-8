#[allow(dead_code)]
struct CPU {
    // usize is used to allow indexing.
    registers: [u8; 16],
    position_in_memory: usize,
    memory: [u8; 0x1000],
    // stack size is limited to 16, after 16, program encounters stack overflow.
    stack: [u16; 16],
    stack_pointer: usize,
}

impl CPU {
    fn read_opcode(&self) -> u16 {
        // u16 opcode is generated by combining two values from memory with
        // logical OR operation. They need to be cast to u16 as the left
        // shift set all of the bits to 0.

        let p = self.position_in_memory;
        let op_byte1 = self.memory[p] as u16;
        let op_byte2 = self.memory[p + 1] as u16;

        op_byte1 << 8 | op_byte2
    }

    fn run(&mut self) {
        // Select single nibbles with the AND operator to filter bits,
        // then move the bits to the lowest signficant place.
        loop {
            let opcode = self.read_opcode();

            // Increment to next instruction
            self.position_in_memory += 2;

            let c = ((opcode & 0xF000) >> 12) as u8;
            let x = ((opcode & 0x0F00) >> 8) as u8;
            let y = ((opcode & 0x00F0) >> 4) as u8;
            let d = ((opcode & 0x000F) >> 0) as u8;

            let nnn = opcode & 0x0FFF;
            // let kk = ((opcode & 0x00FF) as u8;
            match (c, x, y, d) {
                (0, 0, 0, 0) => {
                    return;
                }
                (0, 0, 0xE, 0xE) => self.ret(),
                (0x2, _, _, _) => self.call(nnn),
                (0x8, _, _, 0x4) => self.add_xy(x, y),
                _ => todo!("opcode {:04x}", opcode),
            }
        }
    }

    fn add_xy(&mut self, x: u8, y: u8) {
        // Last register is used as carry flag. When set, the flag indicates
        // that an operation has overflowed the register size.
        let arg1 = self.registers[x as usize];
        let arg2 = self.registers[y as usize];

        let (val, overflow) = arg1.overflowing_add(arg2);
        self.registers[x as usize] = val;

        if overflow {
            self.registers[0xF] = 1;
        } else {
            self.registers[0xF] = 0;
        }
    }

    fn call(&mut self, addr: u16) {
        let sp = self.stack_pointer;
        let stack = &mut self.stack;

        if sp > stack.len() {
            panic!("Stack overflow!")
        }

        // adds the current position_in_memory to the stack.
        // the memory address is two bytes higher than the
        // calling location as it is incremented within the body
        // of the run() method.
        stack[sp] = self.position_in_memory as u16;

        // increments self.stack_pointer to prevent self.position_in_memory
        // from being overwritten until it needs to be accessed again.
        self.stack_pointer += 1;
        self.position_in_memory = addr as usize;
    }

    fn ret(&mut self) {
        if self.stack_pointer == 0 {
            panic!("Stack overflow");
        }

        self.stack_pointer -= 1;
        let call_addr = self.stack[self.stack_pointer];
        self.position_in_memory = call_addr as usize;
    }
}

fn main() {
    let mut cpu = CPU {
        registers: [0; 16],
        memory: [0; 4096],
        position_in_memory: 0,
        stack: [0; 16],
        stack_pointer: 0,
    };

    cpu.registers[0] = 5;
    cpu.registers[1] = 10;

    let mem = &mut cpu.memory;
    // Call function at 0x100
    mem[0x000] = 0x21;
    mem[0x001] = 0x00;

    // Call function at 0x100
    mem[0x002] = 0x21;
    mem[0x003] = 0x00;

    // HALT
    mem[0x004] = 0x00;
    mem[0x005] = 0x00;

    // Add register 1 value to to register 0
    mem[0x100] = 0x80;
    mem[0x101] = 0x14;

    // Add register 1 value to to register 0
    mem[0x102] = 0x80;
    mem[0x103] = 0x14;

    mem[0x104] = 0x00;
    mem[0x105] = 0xEE;
    cpu.run();

    assert_eq!(cpu.registers[0], 45);
    println!("5+(10*2)+(10*2)= {}", cpu.registers[0]);
}
